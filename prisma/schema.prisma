generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// Admin Table
model Admin {
  adminId   String   @id @unique
  name      String
  email     String   @unique
  password  String
  phone     String
  role      Role     @default(ADMIN)
  createdAt DateTime @default(now())
}

/// Customer Table
model Customer {
  customerId         String   @id @unique
  name               String
  email              String   @unique
  password           String
  phone              String
  address            String?
  nic                String?  @unique
  nicPhoto1          String?
  nicPhoto2          String?
  driverLicenseNum   String?  @unique
  driverLicensePhoto String?
  createdAt          DateTime @default(now())
  role               String   @default("CUSTOMER")

  // Relationships
  bookings Booking[]
  reviews  Review[]
}

/// Car Table
model Car {
  carId           String           @id @unique
  carNumberPlate  String           @unique
  brand           String
  model           String
  year            Int
  pricePerDay     Decimal
  status          CarStatus
  seatingCapacity Int
  transmission    TransmissionType
  fuelType        FuelType
  features        Json?
  image1          String?
  image2          String?
  image3          String?
  createdAt       DateTime         @default(now())
  minRentalPeriod Int @default(1)
  maxRentalPeriod Int @default(28)
  reviews    Review[]
  bookingCar BookingCar[]
}

/// Booking Table
model Booking {
  bookingId   String        @id @unique
  customerId  String

  pickupLocation String
  pickupDate    DateTime
  returnDate    DateTime
  pickupTime    String
  returnTime    String
  status      BookingStatus @default(PENDING)
  totalAmount Decimal
  createdAt   DateTime      @default(now())

  // Relationships
  // customer   Customer     @relation(fields: [customerId], references: [customerId])
  customer   Customer     @relation(fields: [customerId], references: [customerId], onDelete: Cascade)
  bookingCar BookingCar[]
  payment    Payment?
}

/// BookingCar Table (Association Table for Many-to-Many)
model BookingCar {
  bookingId String
  carId     String

  // Relationships
  booking Booking @relation(fields: [bookingId], references: [bookingId], onDelete: Cascade)
  car     Car     @relation(fields: [carId], references: [carId], onDelete: Cascade)

  @@id([bookingId, carId])
}

/// Payment Table
model Payment {
  paymentId String        @id @unique
  bookingId String        @unique
  amount    Decimal
  method    PaymentMethod
  status    PaymentStatus @default(PENDING)
  createdAt DateTime      @default(now())

  // Relationship
  booking Booking @relation(fields: [bookingId], references: [bookingId])
}

/// Review Table
model Review {
  id         Int          @id @default(autoincrement())
  customerId String
  carId      String
  rating     Int
  comment    String?
  status     ReviewStatus @default(PENDING)
  createdAt  DateTime     @default(now())

  // Relationships
  // customer Customer @relation(fields: [customerId], references: [customerId])
  // car      Car      @relation(fields: [carId], references: [carId])
  customer Customer @relation(fields: [customerId], references: [customerId], onDelete: Cascade)
  car      Car      @relation(fields: [carId], references: [carId])
}

/// ENUMS

/// Enum for Roles
enum Role {
  ADMIN
  ADMINISTRATIVE
}

enum CarStatus {
  AVAILABLE
  RENTED
  MAINTENANCE
}

enum TransmissionType {
  AUTOMATIC
  MANUAL
}

enum FuelType {
  PETROL
  DIESEL
  HYBRID
  ELECTRIC
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  CASH
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}
